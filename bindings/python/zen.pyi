from typing import Optional

class ZenEngine:
    def __init__(self, maybe_options: Optional[dict] = None) -> None: ...
    
    def evaluate(self, key: str, ctx: dict, opts: Optional[dict] = None) -> dict: ...
    
    def create_decision(self) -> ZenDecision: ...
    
    def get_decision(self, key: str) -> ZenDecision: ...

class ZenDecision:
    def evaluate(self,ctx: dict, opts: Optional[dict] = None) -> dict: ...
    
    def validate(self) -> None: ...
    
def evaluate_expression(expression: str, ctx: Optional[dict] = None) -> dict: ...

def evaluate_unary_expression(expression: str, ctx: dict) -> bool: ...

def render_template(template: str, ctx: dict) -> dict: ...
