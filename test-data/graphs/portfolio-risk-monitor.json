{
  "tests": [
    {
      "input": {
        "customer": {
          "id": "cust-78945",
          "name": "John Smith",
          "riskTolerance": "moderate",
          "investmentHorizon": "long-term",
          "preferences": {
            "allowAutomaticAdjustments": true,
            "alertThreshold": "moderate",
            "communicationPreference": "email"
          }
        },
        "portfolio": {
          "id": "port-12345",
          "name": "Retirement Portfolio",
          "totalValue": 750000,
          "creationDate": "2019-05-12",
          "lastRebalance": 95,
          "volatility": 22.5,
          "highRiskPercentage": 35,
          "currentAllocation": {
            "equity": 65,
            "bonds": 25,
            "cash": 10
          },
          "targetAllocation": {
            "equity": 60,
            "bonds": 35,
            "cash": 5
          },
          "holdings": [
            {
              "symbol": "VTI",
              "category": "equity",
              "percentage": 30,
              "value": 225000
            },
            {
              "symbol": "VXUS",
              "category": "equity",
              "percentage": 20,
              "value": 150000
            },
            {
              "symbol": "VGT",
              "category": "equity",
              "percentage": 15,
              "value": 112500
            },
            {
              "symbol": "BND",
              "category": "bonds",
              "percentage": 25,
              "value": 187500
            },
            {
              "symbol": "CASH",
              "category": "cash",
              "percentage": 10,
              "value": 75000
            }
          ]
        },
        "market": {
          "volatilityIndex": 28.5,
          "trendPercentage": -12.5,
          "interestRate": 3.75,
          "sectorPerformance": {
            "technology": -15.2,
            "healthcare": -5.1,
            "financials": -18.4,
            "consumerStaples": -3.2,
            "utilities": 1.5
          },
          "economicIndicators": {
            "gdpGrowth": 0.8,
            "inflation": 4.2,
            "unemploymentRate": 4.1
          }
        }
      },
      "output": {
        "action": "rebalance",
        "outcome": {
          "riskScore": 0.53,
          "status": "rebalance_suggested",
          "timestamp": "2025-08-19T16:55:02.078Z"
        },
        "rebalanceDetails": {
          "currentAllocation": {
            "bonds": 25,
            "cash": 10,
            "equity": 65
          },
          "customerId": "cust-78945",
          "date": "2025-08-19",
          "driftPercentage": "5.0",
          "message": "Rebalancing recommended: Portfolio has drifted 5.0% from target allocation.",
          "portfolioId": "port-12345",
          "riskCategory": "high",
          "riskScore": 0.53,
          "suggestedChanges": {
            "bonds": 10,
            "cash": -5,
            "equity": -5
          },
          "targetAllocation": {
            "bonds": 35,
            "cash": 5,
            "equity": 60
          }
        }
      }
    }
  ],
  "nodes": [
    {
      "id": "inputNode",
      "name": "request",
      "type": "inputNode",
      "content": {
        "schema": ""
      },
      "position": {
        "x": 110,
        "y": 193.5
      }
    },
    {
      "id": "marketConditionsTable",
      "name": "marketConditionsAssessment",
      "type": "decisionTableNode",
      "content": {
        "rules": [
          {
            "_id": "rule1",
            "i1-1": "> 30",
            "i1-2": "< -15",
            "o1-1": "'severe'",
            "o1-2": "0.8",
            "o1-3": "'Highly volatile market with significant downward trend'"
          },
          {
            "_id": "rule2",
            "i1-1": "> 25",
            "i1-2": "< -10",
            "o1-1": "'high'",
            "o1-2": "0.7",
            "o1-3": "'Elevated volatility with substantial market decline'"
          },
          {
            "_id": "rule3",
            "i1-1": "> 20",
            "i1-2": "< -5",
            "o1-1": "'moderate'",
            "o1-2": "0.5",
            "o1-3": "'Increased volatility with market decline'"
          },
          {
            "_id": "rule4",
            "i1-1": "> 25",
            "i1-2": "> 5",
            "o1-1": "'neutral'",
            "o1-2": "0.3",
            "o1-3": "'High volatility but positive market trend'"
          },
          {
            "_id": "rule5",
            "i1-1": "> 15",
            "i1-2": "",
            "o1-1": "'elevated'",
            "o1-2": "0.4",
            "o1-3": "'Elevated market volatility'"
          },
          {
            "_id": "rule6",
            "i1-1": "",
            "i1-2": "< -10",
            "o1-1": "'negative'",
            "o1-2": "0.6",
            "o1-3": "'Significant market decline'"
          },
          {
            "_id": "rule7",
            "i1-1": "",
            "i1-2": "",
            "o1-1": "'normal'",
            "o1-2": "0.2",
            "o1-3": "'Normal market conditions'"
          }
        ],
        "inputs": [
          {
            "id": "i1-1",
            "name": "Market Volatility Index",
            "field": "market.volatilityIndex"
          },
          {
            "id": "i1-2",
            "name": "Market Trend Percent",
            "field": "market.trendPercentage"
          }
        ],
        "outputs": [
          {
            "id": "o1-1",
            "name": "Market Condition",
            "field": "assessment.marketCondition"
          },
          {
            "id": "o1-2",
            "name": "Market Risk Factor",
            "field": "assessment.marketRiskFactor"
          },
          {
            "id": "o1-3",
            "name": "Market Assessment",
            "field": "assessment.marketAssessment"
          }
        ],
        "hitPolicy": "first",
        "inputField": null,
        "outputPath": null,
        "passThrough": true,
        "executionMode": "single"
      },
      "position": {
        "x": 430,
        "y": 193.5
      }
    },
    {
      "id": "portfolioExposureTable",
      "name": "portfolioExposureAssessment",
      "type": "decisionTableNode",
      "content": {
        "rules": [
          {
            "_id": "rule1",
            "i1-1": "> 50",
            "i1-2": "assessment.marketCondition == 'severe' or assessment.marketCondition == 'high'",
            "o1-1": "'critical'",
            "o1-2": "0.9"
          },
          {
            "_id": "rule2",
            "i1-1": "> 40",
            "i1-2": "assessment.marketCondition == 'severe' or assessment.marketCondition == 'high'",
            "o1-1": "'high'",
            "o1-2": "0.7"
          },
          {
            "_id": "rule3",
            "i1-1": "> 30",
            "i1-2": "assessment.marketCondition != 'normal'",
            "o1-1": "'elevated'",
            "o1-2": "0.5"
          },
          {
            "_id": "rule4",
            "i1-1": "> 20",
            "i1-2": "",
            "o1-1": "'moderate'",
            "o1-2": "0.3"
          },
          {
            "_id": "rule5",
            "i1-1": "",
            "i1-2": "",
            "o1-1": "'low'",
            "o1-2": "0.1"
          }
        ],
        "inputs": [
          {
            "id": "i1-1",
            "name": "High-Risk Asset Percentage",
            "field": "portfolio.highRiskPercentage"
          },
          {
            "id": "i1-2",
            "name": "Market Condition Check"
          }
        ],
        "outputs": [
          {
            "id": "o1-1",
            "name": "Exposure Level",
            "field": "assessment.exposureLevel"
          },
          {
            "id": "o1-2",
            "name": "Exposure Factor",
            "field": "assessment.exposureFactor"
          }
        ],
        "hitPolicy": "first",
        "inputField": null,
        "outputPath": null,
        "passThrough": true,
        "executionMode": "single"
      },
      "position": {
        "x": 750,
        "y": 193.5
      }
    },
    {
      "id": "portfolioVolatilityTable",
      "name": "portfolioVolatilityAssessment",
      "type": "decisionTableNode",
      "content": {
        "rules": [
          {
            "_id": "rule1",
            "i1-1": "> 30",
            "i1-2": "> 0.6",
            "o1-1": "'high'",
            "o1-2": "0.8"
          },
          {
            "_id": "rule2",
            "i1-1": "> 25",
            "i1-2": "> 0.4",
            "o1-1": "'elevated'",
            "o1-2": "0.6"
          },
          {
            "_id": "rule3",
            "i1-1": "> 20",
            "i1-2": "",
            "o1-1": "'moderate'",
            "o1-2": "0.4"
          },
          {
            "_id": "rule4",
            "i1-1": "> 15",
            "i1-2": "",
            "o1-1": "'low'",
            "o1-2": "0.2"
          },
          {
            "_id": "rule5",
            "i1-1": "",
            "i1-2": "",
            "o1-1": "'minimal'",
            "o1-2": "0.1"
          }
        ],
        "inputs": [
          {
            "id": "i1-1",
            "name": "Portfolio Volatility",
            "field": "portfolio.volatility"
          },
          {
            "id": "i1-2",
            "name": "Market Risk Factor",
            "field": "assessment.marketRiskFactor"
          }
        ],
        "outputs": [
          {
            "id": "o1-1",
            "name": "Volatility Level",
            "field": "assessment.volatilityLevel"
          },
          {
            "id": "o1-2",
            "name": "Volatility Factor",
            "field": "assessment.volatilityFactor"
          }
        ],
        "hitPolicy": "first",
        "inputField": null,
        "outputPath": null,
        "passThrough": true,
        "executionMode": "single"
      },
      "position": {
        "x": 1070,
        "y": 193.5
      }
    },
    {
      "id": "riskScoreCalculation",
      "name": "calculateRiskScore",
      "type": "expressionNode",
      "content": {
        "inputField": null,
        "outputPath": null,
        "expressions": [
          {
            "id": "expr1",
            "key": "marketWeight",
            "value": "0.3"
          },
          {
            "id": "expr2",
            "key": "exposureWeight",
            "value": "0.4"
          },
          {
            "id": "expr3",
            "key": "volatilityWeight",
            "value": "0.3"
          },
          {
            "id": "expr4",
            "key": "riskScore",
            "value": "assessment.marketRiskFactor * $.marketWeight + assessment.exposureFactor * $.exposureWeight + assessment.volatilityFactor * $.volatilityWeight"
          },
          {
            "id": "expr5",
            "key": "portfolioDrift",
            "value": "abs(portfolio.currentAllocation.equity - portfolio.targetAllocation.equity)"
          },
          {
            "id": "expr6",
            "key": "riskCategory",
            "value": "$.riskScore >= 0.7 ? 'critical' : $.riskScore >= 0.5 ? 'high' : $.riskScore >= 0.3 ? 'moderate' : 'low'"
          }
        ],
        "passThrough": true,
        "executionMode": "single"
      },
      "position": {
        "x": 1390,
        "y": 193.5
      }
    },
    {
      "id": "actionDeterminationSwitch",
      "name": "determineAction",
      "type": "switchNode",
      "content": {
        "hitPolicy": "first",
        "statements": [
          {
            "id": "alertAction",
            "condition": "riskCategory == 'moderate' and assessment.marketCondition != 'normal'",
            "isDefault": false
          },
          {
            "id": "rebalanceAction",
            "condition": "portfolioDrift > 10 or (riskCategory == 'high' and portfolio.lastRebalance > 90)",
            "isDefault": false
          },
          {
            "id": "mitigateAction",
            "condition": "riskCategory == 'critical' or (riskCategory == 'high' and assessment.marketCondition == 'severe')",
            "isDefault": false
          },
          {
            "id": "noAction",
            "condition": "",
            "isDefault": true
          }
        ]
      },
      "position": {
        "x": 1710,
        "y": 193.5
      }
    },
    {
      "id": "alertFunction",
      "name": "generateAlert",
      "type": "functionNode",
      "content": {
        "source": "import dayjs from 'dayjs';\nexport const handler = async (input) => {\n  const { customer, portfolio, assessment, riskScore, riskCategory } = input;\n  const alertDate = dayjs().format('YYYY-MM-DD');\n\n  return {\n    action: 'alert',\n    alertDetails: {\n      customerId: customer.id,\n      portfolioId: portfolio.id,\n      date: alertDate,\n      riskScore: riskScore,\n      riskCategory: riskCategory,\n      message: `Risk alert: Portfolio risk level is ${riskCategory} (${riskScore.toFixed(2)}). Market conditions: ${assessment.marketAssessment}`,\n      recommendedAction: 'Review portfolio allocation'\n    },\n    outcome: { status: 'alert_generated', riskScore: riskScore, timestamp: new Date().toISOString() }\n  };\n};"
      },
      "position": {
        "x": 2030,
        "y": 46.5
      }
    },
    {
      "id": "rebalanceFunction",
      "name": "suggestRebalancing",
      "type": "functionNode",
      "content": {
        "source": "import dayjs from 'dayjs';\nexport const handler = async (input) => {\n  const { customer, portfolio, assessment, riskScore, riskCategory, portfolioDrift } = input;\n  const currentDate = dayjs().format('YYYY-MM-DD');\n  const suggestedEquity = portfolio.targetAllocation.equity;\n  const suggestedBonds = portfolio.targetAllocation.bonds;\n  const suggestedCash = portfolio.targetAllocation.cash;\n  const driftPercentage = portfolioDrift.toFixed(1);\n\n  return {\n    action: 'rebalance',\n    rebalanceDetails: {\n      customerId: customer.id,\n      portfolioId: portfolio.id,\n      date: currentDate,\n      riskScore: riskScore,\n      riskCategory: riskCategory,\n      currentAllocation: portfolio.currentAllocation,\n      targetAllocation: portfolio.targetAllocation,\n      driftPercentage: driftPercentage,\n      suggestedChanges: {\n        equity: suggestedEquity - portfolio.currentAllocation.equity,\n        bonds: suggestedBonds - portfolio.currentAllocation.bonds,\n        cash: suggestedCash - portfolio.currentAllocation.cash\n      },\n      message: `Rebalancing recommended: Portfolio has drifted ${driftPercentage}% from target allocation.`\n    },\n    outcome: { status: 'rebalance_suggested', riskScore: riskScore, timestamp: new Date().toISOString() }\n  };\n};"
      },
      "position": {
        "x": 2030,
        "y": 144.5
      }
    },
    {
      "id": "mitigationFunction",
      "name": "implementRiskMitigation",
      "type": "functionNode",
      "content": {
        "source": "import dayjs from 'dayjs';\nexport const handler = async (input) => {\n  const { customer, portfolio, assessment, riskScore, riskCategory } = input;\n  const mitigationDate = dayjs().format('YYYY-MM-DD');\n  const suggestedEquity = Math.max(portfolio.targetAllocation.equity - 15, 0);\n  const suggestedBonds = Math.min(portfolio.targetAllocation.bonds + 10, 100 - suggestedEquity - 5);\n  const suggestedCash = 100 - suggestedEquity - suggestedBonds;\n\n  return {\n    action: 'mitigate',\n    mitigationDetails: {\n      customerId: customer.id,\n      portfolioId: portfolio.id,\n      date: mitigationDate,\n      riskScore: riskScore,\n      riskCategory: riskCategory,\n      currentAllocation: portfolio.currentAllocation,\n      suggestedAllocation: { equity: suggestedEquity, bonds: suggestedBonds, cash: suggestedCash },\n      message: `Risk mitigation required: Market conditions (${assessment.marketCondition}) and portfolio risk (${riskCategory}) indicate immediate action needed.`,\n      automaticChanges: assessment.marketCondition === 'severe' && riskCategory === 'critical' && customer.preferences.allowAutomaticAdjustments\n    },\n    outcome: { status: 'mitigation_implemented', riskScore: riskScore, timestamp: new Date().toISOString() }\n  };\n};"
      },
      "position": {
        "x": 2030,
        "y": 242.5
      }
    },
    {
      "id": "noActionRequired",
      "name": "noActionNeeded",
      "type": "expressionNode",
      "content": {
        "inputField": null,
        "outputPath": null,
        "expressions": [
          {
            "id": "expr1",
            "key": "outcome",
            "value": "{ status: 'no_action_required', riskScore: riskScore, timestamp: string(date('now')) }"
          }
        ],
        "passThrough": true,
        "executionMode": "single"
      },
      "position": {
        "x": 2030,
        "y": 340.5
      }
    }
  ],
  "edges": [
    {
      "id": "edge1",
      "type": "edge",
      "sourceId": "inputNode",
      "targetId": "marketConditionsTable"
    },
    {
      "id": "edge2",
      "type": "edge",
      "sourceId": "marketConditionsTable",
      "targetId": "portfolioExposureTable"
    },
    {
      "id": "edge3",
      "type": "edge",
      "sourceId": "portfolioExposureTable",
      "targetId": "portfolioVolatilityTable"
    },
    {
      "id": "edge4",
      "type": "edge",
      "sourceId": "portfolioVolatilityTable",
      "targetId": "riskScoreCalculation"
    },
    {
      "id": "edge5",
      "type": "edge",
      "sourceId": "riskScoreCalculation",
      "targetId": "actionDeterminationSwitch"
    },
    {
      "id": "edge6",
      "type": "edge",
      "sourceId": "actionDeterminationSwitch",
      "targetId": "alertFunction",
      "sourceHandle": "alertAction"
    },
    {
      "id": "edge7",
      "type": "edge",
      "sourceId": "actionDeterminationSwitch",
      "targetId": "rebalanceFunction",
      "sourceHandle": "rebalanceAction"
    },
    {
      "id": "edge8",
      "type": "edge",
      "sourceId": "actionDeterminationSwitch",
      "targetId": "mitigationFunction",
      "sourceHandle": "mitigateAction"
    },
    {
      "id": "edge9",
      "type": "edge",
      "sourceId": "actionDeterminationSwitch",
      "targetId": "noActionRequired",
      "sourceHandle": "noAction"
    }
  ]
}